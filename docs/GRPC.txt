
Below are the contents of the protofile. This implementation is very straight forward. From the "Contacts" service, we will to recieve a list of all people from the "People" service. That message structure is represented in the proto file. For code, there needs to be a server in the "People" service and from the "Connection" service a client call needs to be made.

*** Server code ****

class PeopleServicer(people_pb2_grpc.PeopleServiceServicer):
    def __init__(self, app_context):
        self.app_context = app_context
    
    def Get(self, request, context):
        result = people_pb2.PeopleMessageList()

        with self.app_context:
           for person in PersonService.retrieve_all():
               peoplePerson = people_pb2.PersonMessage(
                  id=int(person.id),
                  first_name=person.first_name,
                  last_name=person.last_name,
                  company_name=person.company_name,
               )
               result.people.extend([peoplePerson])
        
        return result


def start_server(app_context):
    global server
    logging.info('Starting server')
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=2))
    people_pb2_grpc.add_PeopleServiceServicer_to_server(PeopleServicer(app_context),  server)
    server.add_insecure_port("[::]:5005")
    server.start()
    print("Server starting on port 5005...")
    logging.info('Server starting on port = %s', 5005)


*** Client Code ****

    channel = grpc.insecure_channel("udaconnect-api-people-svc:5005")
    stub = people_pb2_grpc.PeopleServiceStub(channel)
    person_map = {}
    peopleMessageList = stub.Get(people_pb2.Empty())
    for peeps in peopleMessageList.people:
       pee = Person
       pee.id = peeps.id
       pee.first_name = peeps.first_name
       pee.last_name = peeps.last_name
       pee.company_name = peeps.company_name
       person_map[pee.id] = pee





#### Contents of Proto File ####

syntax = "proto3";

message PersonMessage {
  int32 id = 1;
  string first_name = 2;
  string last_name = 3;
  string company_name = 4;
}

message Empty {

}

message PeopleMessageList {
  repeated PersonMessage people = 1;
}

service PeopleService {
  rpc Create(PersonMessage) returns (PersonMessage);
  rpc Get(Empty) returns (PeopleMessageList);
}
